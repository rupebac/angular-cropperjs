{"version":3,"file":"angular-ng12-cropperjs.umd.js","sources":["../../../projects/angular-cropperjs/src/lib/angular-cropperjs.service.ts","../../../projects/angular-cropperjs/src/lib/cropper/cropper.component.ts","../../../projects/angular-cropperjs/src/lib/cropper/cropper.component.html","../../../projects/angular-cropperjs/src/lib/angular-cropperjs.module.ts","../../../projects/angular-cropperjs/src/public_api.ts","../../../projects/angular-cropperjs/src/angular-ng12-cropperjs.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularCropperjsService {\n\n  constructor() { }\n}\n","import { Component, OnInit, OnDestroy, ViewEncapsulation, ElementRef, ViewChild, Input, EventEmitter, Output } from '@angular/core';\nimport Cropper from 'cropperjs';\n\nexport interface ImageCropperSetting {\n    width: number;\n    height: number;\n}\n\nexport interface ImageCropperResult {\n    imageData: Cropper.ImageData;\n    cropData: Cropper.CropBoxData;\n    blob?: Blob;\n    dataUrl?: string;\n}\n\n@Component({\n    selector: 'angular-cropper',\n    templateUrl: './cropper.component.html',\n    styleUrls: ['./cropper.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class CropperComponent implements OnInit, OnDestroy {\n\n    @ViewChild('image', { read: ElementRef, static: true }) image: ElementRef;\n\n    @Input() imageUrl: any;\n    @Input() settings: ImageCropperSetting;\n    @Input() cropbox: Cropper.CropBoxData;\n    @Input() loadImageErrorText: string;\n    @Input() cropperOptions: any = {};\n\n    @Output() export = new EventEmitter<ImageCropperResult>();\n    @Output() ready = new EventEmitter();\n\n    public isLoading: boolean = true;\n    public cropper: Cropper;\n    public imageElement: HTMLImageElement;\n    public loadError: any;\n\n    constructor() { }\n\n    public ngOnInit(): void {}\n\n    public ngOnDestroy(): void {\n      if(this.cropper) {\n        this.cropper.destroy();\n        this.cropper = null;\n      }\n    }\n\n    /**\n     * Image loaded\n     * @param ev\n     */\n    public imageLoaded(ev: Event): void {\n\n        //\n        // Unset load error state\n        this.loadError = false;\n\n        //\n        // Setup image element\n        const image = ev.target as HTMLImageElement;\n        this.imageElement = image;\n\n        //\n        // Add crossOrigin?\n        if (this.cropperOptions.checkCrossOrigin) {\n            image.crossOrigin = 'anonymous';\n        }\n\n        //\n        // Image on ready event\n        image.addEventListener('ready', () => {\n            //\n            // Emit ready\n            this.ready.emit(true);\n\n            //\n            // Unset loading state\n            this.isLoading = false;\n\n            //\n            // Validate cropbox existance\n            if (this.cropbox) {\n\n                //\n                // Set cropbox data\n                this.cropper.setCropBoxData(this.cropbox);\n            }\n        });\n\n        //\n        // Setup aspect ratio according to settings\n        let aspectRatio = NaN;\n        if (this.settings) {\n            const { width, height } = this.settings;\n            aspectRatio = width / height;\n        }\n\n        //\n        // Set crop options\n        // extend default with custom config\n        this.cropperOptions = Object.assign({\n            aspectRatio,\n            movable: false,\n            scalable: false,\n            zoomable: false,\n            viewMode: 1,\n            checkCrossOrigin: true\n        }, this.cropperOptions);\n\n        //\n        // Set cropperjs\n        if (this.cropper) {\n            this.cropper.destroy();\n            this.cropper = undefined;\n        }\n        this.cropper = new Cropper(image, this.cropperOptions);\n    }\n\n    /**\n     * Image load error\n     * @param event\n     */\n    public imageLoadError(event: any): void {\n\n        //\n        // Set load error state\n        this.loadError = true;\n\n        //\n        // Unset loading state\n        this.isLoading = false;\n    }\n\n    /**\n     * Export canvas\n     * @param base64\n     */\n    public exportCanvas(base64?: any): void {\n\n        //\n        // Get and set image, crop and canvas data\n        const imageData = this.cropper.getImageData();\n        const cropData = this.cropper.getCropBoxData();\n        const canvas = this.cropper.getCroppedCanvas();\n        const data = { imageData, cropData };\n\n        //\n        // Create promise to resolve canvas data\n        const promise = new Promise(resolve => {\n\n            //\n            // Validate base64\n            if (base64) {\n\n                //\n                // Resolve promise with dataUrl\n                return resolve({\n                    dataUrl: canvas.toDataURL('image/png')\n                });\n            }\n            canvas.toBlob(blob => resolve({ blob }));\n        });\n\n        //\n        // Emit export data when promise is ready\n        promise.then(res => {\n            this.export.emit(Object.assign(data, res));\n        });\n    }\n}\n","<!-- CROPPER WRAPPER -->\n<div class=\"cropper-wrapper\">\n\n    <!-- LOADING -->\n    <div class=\"loading-block\" *ngIf=\"isLoading\">\n        <div class=\"spinner\"></div>\n    </div>\n\n    <!-- LOAD ERROR -->\n    <div class=\"alert alert-warning\" *ngIf=\"loadError\">{{ loadImageErrorText }}</div>\n\n    <!-- CROPPER -->\n    <div class=\"cropper\">\n        <img #image alt=\"image\" [src]=\"imageUrl\" (load)=\"imageLoaded($event)\" (error)=\"imageLoadError($event)\" />\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CropperComponent } from './cropper/cropper.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [CropperComponent],\n    exports: [CropperComponent]\n})\nexport class AngularCropperjsModule { }\n","/*\n * Public API Surface of angular-cropperjs\n */\n\nexport * from './lib/angular-cropperjs.service';\nexport * from './lib/cropper/cropper.component';\nexport * from './lib/angular-cropperjs.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["Injectable","EventEmitter","Cropper","ElementRef","Component","ViewEncapsulation","ViewChild","Input","Output","CommonModule","NgModule"],"mappings":"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"}