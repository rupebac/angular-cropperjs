{"version":3,"file":"angular-ng12-cropperjs.js","sources":["../../../projects/angular-cropperjs/src/lib/angular-cropperjs.service.ts","../../../projects/angular-cropperjs/src/lib/cropper/cropper.component.ts","../../../projects/angular-cropperjs/src/lib/cropper/cropper.component.html","../../../projects/angular-cropperjs/src/lib/angular-cropperjs.module.ts","../../../projects/angular-cropperjs/src/public_api.ts","../../../projects/angular-cropperjs/src/angular-ng12-cropperjs.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularCropperjsService {\n\n  constructor() { }\n}\n","import { Component, OnInit, OnDestroy, ViewEncapsulation, ElementRef, ViewChild, Input, EventEmitter, Output } from '@angular/core';\nimport Cropper from 'cropperjs';\n\nexport interface ImageCropperSetting {\n    width: number;\n    height: number;\n}\n\nexport interface ImageCropperResult {\n    imageData: Cropper.ImageData;\n    cropData: Cropper.CropBoxData;\n    blob?: Blob;\n    dataUrl?: string;\n}\n\n@Component({\n    selector: 'angular-cropper',\n    templateUrl: './cropper.component.html',\n    styleUrls: ['./cropper.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class CropperComponent implements OnInit, OnDestroy {\n\n    @ViewChild('image', { read: ElementRef, static: true }) image: ElementRef;\n\n    @Input() imageUrl: any;\n    @Input() settings: ImageCropperSetting;\n    @Input() cropbox: Cropper.CropBoxData;\n    @Input() loadImageErrorText: string;\n    @Input() cropperOptions: any = {};\n\n    @Output() export = new EventEmitter<ImageCropperResult>();\n    @Output() ready = new EventEmitter();\n\n    public isLoading: boolean = true;\n    public cropper: Cropper;\n    public imageElement: HTMLImageElement;\n    public loadError: any;\n\n    constructor() { }\n\n    public ngOnInit(): void {}\n\n    public ngOnDestroy(): void {\n      if(this.cropper) {\n        this.cropper.destroy();\n        this.cropper = null;\n      }\n    }\n\n    /**\n     * Image loaded\n     * @param ev\n     */\n    public imageLoaded(ev: Event): void {\n\n        //\n        // Unset load error state\n        this.loadError = false;\n\n        //\n        // Setup image element\n        const image = ev.target as HTMLImageElement;\n        this.imageElement = image;\n\n        //\n        // Add crossOrigin?\n        if (this.cropperOptions.checkCrossOrigin) {\n            image.crossOrigin = 'anonymous';\n        }\n\n        //\n        // Image on ready event\n        image.addEventListener('ready', () => {\n            //\n            // Emit ready\n            this.ready.emit(true);\n\n            //\n            // Unset loading state\n            this.isLoading = false;\n\n            //\n            // Validate cropbox existance\n            if (this.cropbox) {\n\n                //\n                // Set cropbox data\n                this.cropper.setCropBoxData(this.cropbox);\n            }\n        });\n\n        //\n        // Setup aspect ratio according to settings\n        let aspectRatio = NaN;\n        if (this.settings) {\n            const { width, height } = this.settings;\n            aspectRatio = width / height;\n        }\n\n        //\n        // Set crop options\n        // extend default with custom config\n        this.cropperOptions = Object.assign({\n            aspectRatio,\n            movable: false,\n            scalable: false,\n            zoomable: false,\n            viewMode: 1,\n            checkCrossOrigin: true\n        }, this.cropperOptions);\n\n        //\n        // Set cropperjs\n        if (this.cropper) {\n            this.cropper.destroy();\n            this.cropper = undefined;\n        }\n        this.cropper = new Cropper(image, this.cropperOptions);\n    }\n\n    /**\n     * Image load error\n     * @param event\n     */\n    public imageLoadError(event: any): void {\n\n        //\n        // Set load error state\n        this.loadError = true;\n\n        //\n        // Unset loading state\n        this.isLoading = false;\n    }\n\n    /**\n     * Export canvas\n     * @param base64\n     */\n    public exportCanvas(base64?: any): void {\n\n        //\n        // Get and set image, crop and canvas data\n        const imageData = this.cropper.getImageData();\n        const cropData = this.cropper.getCropBoxData();\n        const canvas = this.cropper.getCroppedCanvas();\n        const data = { imageData, cropData };\n\n        //\n        // Create promise to resolve canvas data\n        const promise = new Promise(resolve => {\n\n            //\n            // Validate base64\n            if (base64) {\n\n                //\n                // Resolve promise with dataUrl\n                return resolve({\n                    dataUrl: canvas.toDataURL('image/png')\n                });\n            }\n            canvas.toBlob(blob => resolve({ blob }));\n        });\n\n        //\n        // Emit export data when promise is ready\n        promise.then(res => {\n            this.export.emit(Object.assign(data, res));\n        });\n    }\n}\n","<!-- CROPPER WRAPPER -->\n<div class=\"cropper-wrapper\">\n\n    <!-- LOADING -->\n    <div class=\"loading-block\" *ngIf=\"isLoading\">\n        <div class=\"spinner\"></div>\n    </div>\n\n    <!-- LOAD ERROR -->\n    <div class=\"alert alert-warning\" *ngIf=\"loadError\">{{ loadImageErrorText }}</div>\n\n    <!-- CROPPER -->\n    <div class=\"cropper\">\n        <img #image alt=\"image\" [src]=\"imageUrl\" (load)=\"imageLoaded($event)\" (error)=\"imageLoadError($event)\" />\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CropperComponent } from './cropper/cropper.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [CropperComponent],\n    exports: [CropperComponent]\n})\nexport class AngularCropperjsModule { }\n","/*\n * Public API Surface of angular-cropperjs\n */\n\nexport * from './lib/angular-cropperjs.service';\nexport * from './lib/cropper/cropper.component';\nexport * from './lib/angular-cropperjs.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}